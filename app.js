var app = angular.module('app', []);

app.run(function($rootScope){
  $rootScope.name = 'Tubby';
});

app.directive('ngStylus', function($http){
  return {
    restrict: 'A',
    link: function(scope, element){

      /*prototype definitions*/
      var characterBank = {
        "1": [[0.9861111111111112,0.236],[0.9861111111111112,0.252],[0.9861111111111112,0.264],[0.9861111111111112,0.292],[0.9861111111111112,0.324],[0.9791666666666666,0.364],[0.9791666666666666,0.4],[0.9791666666666666,0.436],[0.9791666666666666,0.476],[0.9791666666666666,0.508],[0.9791666666666666,0.536],[0.9722222222222222,0.576],[0.9722222222222222,0.612],[0.9722222222222222,0.668],[0.9722222222222222,0.716],[0.9722222222222222,0.756],[0.9791666666666666,0.788],[0.9791666666666666,0.816],[0.9861111111111112,0.844],[0.9861111111111112,0.868],[0.9930555555555556,0.896]],
        "2": [[0.3745019920318725,0.4144736842105263],[0.3745019920318725,0.41776315789473684],[0.3784860557768924,0.41118421052631576],[0.4262948207171315,0.34868421052631576],[0.5378486055776892,0.27631578947368424],[0.7171314741035857,0.24342105263157895],[0.8247011952191236,0.27960526315789475],[0.8924302788844621,0.3815789473684211],[0.9083665338645418,0.5296052631578947],[0.848605577689243,0.6710526315789473],[0.7609561752988048,0.7763157894736842],[0.6573705179282868,0.8585526315789473],[0.5657370517928287,0.930921052631579],[0.4860557768924303,0.9835526315789473],[0.46215139442231074,1],[0.4940239043824701,0.9901315789473685],[0.6254980079681275,0.9539473684210527],[0.7370517928286853,0.9342105263157895],[0.8366533864541833,0.9276315789473685],[0.9203187250996016,0.9342105263157895],[0.9800796812749004,0.9473684210526315]],
        "3": [[0.34763948497854075,0.35625],[0.34334763948497854,0.35],[0.4334763948497854,0.29375],[0.6137339055793991,0.221875],[0.8111587982832618,0.225],[0.927038626609442,0.28125],[0.9914163090128756,0.375],[1,0.475],[0.927038626609442,0.55],[0.7982832618025751,0.5875],[0.7253218884120172,0.596875],[0.7424892703862661,0.596875],[0.8412017167381974,0.60625],[0.9227467811158798,0.653125],[0.9570815450643777,0.71875],[0.9570815450643777,0.815625],[0.9098712446351931,0.90625],[0.8068669527896996,0.96875],[0.6437768240343348,0.996875],[0.5107296137339056,0.96875],[0.45064377682403434,0.896875]],
        "4": [[0.7978339350180506,0.27896995708154504],[0.7581227436823105,0.33476394849785407],[0.703971119133574,0.4291845493562232],[0.6425992779783394,0.5278969957081545],[0.5776173285198556,0.6437768240343348],[0.51985559566787,0.7553648068669528],[0.48014440433212996,0.8412017167381974],[0.4657039711191336,0.8841201716738197],[0.4620938628158845,0.8927038626609443],[0.5054151624548736,0.8798283261802575],[0.6462093862815884,0.8326180257510729],[0.7617328519855595,0.7896995708154506],[0.8844765342960289,0.7725321888412017],[0.9638989169675091,0.776824034334764],[1,0.7896995708154506],[0.8231046931407943,0.5879828326180258],[0.8231046931407943,0.6051502145922747],[0.8231046931407943,0.7725321888412017],[0.8303249097472925,0.9141630901287554],[0.8411552346570397,0.9871244635193133],[0.8411552346570397,0.9914163090128756]],
        "9": [[0.976303317535545,0.2467948717948718],[0.95260663507109,0.24358974358974358],[0.8862559241706162,0.2724358974358974],[0.7962085308056872,0.34294871794871795],[0.7203791469194313,0.42948717948717946],[0.7061611374407583,0.4935897435897436],[0.7582938388625592,0.5160256410256411],[0.8530805687203792,0.49038461538461536],[0.9383886255924171,0.41025641025641024],[0.985781990521327,0.3333333333333333],[1,0.28205128205128205],[1,0.2532051282051282],[1,0.25],[1,0.25],[1,0.2532051282051282],[0.990521327014218,0.2948717948717949],[0.976303317535545,0.3942307692307692],[0.957345971563981,0.5512820512820513],[0.943127962085308,0.7275641025641025],[0.9241706161137441,0.8653846153846154],[0.9146919431279621,0.9583333333333334]],
        "5": [[0.581151832460733,0.45703125],[0.581151832460733,0.44921875],[0.581151832460733,0.44921875],[0.581151832460733,0.5078125],[0.5654450261780105,0.64453125],[0.5602094240837696,0.70703125],[0.5602094240837696,0.70703125],[0.612565445026178,0.69140625],[0.7068062827225131,0.69140625],[0.8010471204188482,0.73828125],[0.8534031413612565,0.8125],[0.8429319371727748,0.90234375],[0.7382198952879581,0.9765625],[0.612565445026178,1],[0.5287958115183246,0.98828125],[0.5916230366492147,0.4453125],[0.7905759162303665,0.4375],[0.9581151832460733,0.42578125],[0.9947643979057592,0.42578125],[0.9947643979057592,0.42578125],[0.9947643979057592,0.42578125]],
        "6": [[0.9528301886792453,0.2607260726072607],[0.9622641509433962,0.2508250825082508],[0.9622641509433962,0.2508250825082508],[0.9622641509433962,0.2508250825082508],[0.9575471698113207,0.24752475247524752],[0.9292452830188679,0.25412541254125415],[0.8726415094339622,0.2838283828382838],[0.7971698113207547,0.33993399339933994],[0.7075471698113207,0.43234323432343236],[0.6179245283018868,0.5610561056105611],[0.5613207547169812,0.693069306930693],[0.5424528301886793,0.7986798679867987],[0.5566037735849056,0.8877887788778878],[0.6037735849056604,0.9603960396039604],[0.6886792452830188,0.9966996699669967],[0.8066037735849056,0.9966996699669967],[0.9198113207547169,0.9504950495049505],[0.9811320754716981,0.8943894389438944],[1,0.834983498349835],[0.9764150943396226,0.7755775577557755],[0.9056603773584906,0.7029702970297029]],
        "7": [[0.4148471615720524,0.36363636363636365],[0.4104803493449782,0.36363636363636365],[0.40611353711790393,0.36363636363636365],[0.40611353711790393,0.36363636363636365],[0.5021834061135371,0.3787878787878788],[0.7729257641921398,0.38257575757575757],[0.9519650655021834,0.3712121212121212],[0.9868995633187773,0.3712121212121212],[1,0.36363636363636365],[1,0.36363636363636365],[1,0.36363636363636365],[0.9737991266375546,0.3939393939393939],[0.8602620087336245,0.5340909090909091],[0.7467248908296943,0.7196969696969697],[0.6637554585152838,0.8712121212121212],[0.6200873362445415,0.9772727272727273],[0.611353711790393,1],[0.6331877729257642,0.6742424242424242],[0.8995633187772926,0.6325757575757576],[0.9606986899563319,0.6325757575757576],[0.9606986899563319,0.6325757575757576]],
        "8": [[0.7881040892193308,0.18106995884773663],[0.724907063197026,0.16872427983539096],[0.6059479553903345,0.23045267489711935],[0.5241635687732342,0.3662551440329218],[0.550185873605948,0.4732510288065844],[0.6988847583643123,0.5267489711934157],[0.8327137546468402,0.5843621399176955],[0.9628252788104089,0.7119341563786008],[0.9962825278810409,0.8559670781893004],[0.9182156133828996,0.9670781893004116],[0.7472118959107806,0.9876543209876543],[0.654275092936803,0.9094650205761317],[0.6431226765799256,0.7860082304526749],[0.6951672862453532,0.6748971193415638],[0.7620817843866171,0.5761316872427984],[0.8475836431226765,0.4897119341563786],[0.8884758364312267,0.3991769547325103],[0.8921933085501859,0.3045267489711934],[0.8587360594795539,0.20987654320987653],[0.8215613382899628,0.1646090534979424],[0.7323420074349443,0.15637860082304528]],
        "0": [[0.797153024911032,0.3537117903930131],[0.7864768683274022,0.3406113537117904],[0.7580071174377224,0.3318777292576419],[0.6761565836298933,0.3537117903930131],[0.5444839857651246,0.43231441048034935],[0.4555160142348754,0.5458515283842795],[0.41637010676156583,0.6943231441048034],[0.4234875444839858,0.8427947598253275],[0.4804270462633452,0.9388646288209607],[0.5871886120996441,0.9912663755458515],[0.708185053380783,0.9956331877729258],[0.8398576512455516,0.9344978165938864],[0.9572953736654805,0.8427947598253275],[1,0.7336244541484717],[1,0.6244541484716157],[0.9786476868327402,0.5327510917030568],[0.9430604982206405,0.4672489082969432],[0.9039145907473309,0.4192139737991266],[0.8576512455516014,0.37117903930131],[0.8185053380782918,0.3406113537117904],[0.7758007117437722,0.31877729257641924]],
        "star": [[0.3944636678200692,0.9121813031161473],[0.39100346020761245,0.9178470254957507],[0.44982698961937717,0.7875354107648725],[0.5536332179930796,0.49291784702549574],[0.5847750865051903,0.37960339943342775],[0.5951557093425606,0.37393767705382436],[0.726643598615917,0.5269121813031161],[0.9550173010380623,0.8101983002832861],[0.9688581314878892,0.8611898016997167],[0.5916955017301038,0.7138810198300283],[0.2768166089965398,0.6827195467422096],[0.2768166089965398,0.6572237960339944],[0.5501730103806228,0.5354107648725213],[0.9134948096885813,0.43342776203966005],[1,0.43342776203966005],[0.9550173010380623,0.48441926345609065],[0.6885813148788927,0.6572237960339944],[0.4290657439446367,0.9093484419263456],[0.3771626297577855,0.9660056657223796],[0.36678200692041524,1],[0.36678200692041524,1]]
      };

      /*distance calculator*/

      var getDistance = function(coord1, coord2){
        var xDist = coord1[0] - coord2[0];
        xDist = xDist * xDist;
        var yDist = coord1[1] - coord2[1];
        yDist = yDist * yDist;
        return Math.sqrt(xDist + yDist);
      };

      var getSimilarity = function(character, proto){
        var err = 0;
        for(var i=0; i<proto.length; i++){
          err += getDistance(character[i], proto[i]);
        }
        return err;
      };

      var calculateScores = function(character, bank){
        var result = {
          value: undefined,
          error: 9999999
        };
        for(var proto in bank){
          var err = getSimilarity(character, bank[proto]);
          result = err < result.error ? {value: proto, error: err} : result;
        }
        return result;
      };

      /*CHARACTER CATEGORISATION HELPER FUNCTIONS*/

      //Character constructor
      var Character = function(){
          this.coordinates = []; //storage for coordinates
          this.scaledCoordinates = []; //storage for coordinates scaled from 0-100
          this.relativeCoordinates = []; //storage for scaledCoordinates made relative to origin
          this.normalLength = 20; //length of normal coordinates array
          this.character = undefined; //to be defined after input
      };

      //helper functions extending the array prototype
      var getMax = function(array){
        var result = [0, 0];
        array.forEach(function(tuple, index, collection){
          result[0] = result[0] > tuple[0] ? result[0] : tuple[0];
          result[1] = result[1] > tuple[1] ? result[1] : tuple[1];
        });
        return result;
      };

      var getMin = function(array){
        var result = [0, 0];
        array.forEach(function(tuple, index, collection){
          result[0] = result[0] < tuple[0] ? result[0] : tuple[0];
          result[1] = result[1] < tuple[1] ? result[1] : tuple[1];
        });
        return result;
      };

      var flatten = function(array){
        return array.reduce(function(a, b){
          return a.concat(b);
        });
      };

      Character.prototype = {
        //function to store coordinates while user is drawing
        storeCoords: function(x, y, dx, dy){
          this.coordinates.push([x, y]); //push coordinates
        },

        //assigns the character its matching UTF code
        assignCharacter: function(character){
          this.character = character.charCodeAt(0);
          this.scaledCoordinates.unshift(character.charCodeAt(0));
        },

        //scale all coords to be between 0 and 1.
        scaleMatrix: function(){
          var max = getMax(this.coordinates);
          var min = getMin(this.coordinates);
          console.log(max, min);
          var range = [max[0] - min[0], max[1] - min[1]];

          this.scaledCoordinates = this.coordinates.map(function(tuple, index, array){
            var newTuple = [tuple[0] - min[0], tuple[1] - min[1]]; //scale all numbers down so all coords are relative to zero
            newTuple = [newTuple[0] / range[0], newTuple[1] / range[1]]; //scale all coords to vary from 0 - 1
            return newTuple;
          });
        },

        //Boil the matrix down to just this.normalLength, evenly spaced values
        trackingMatrix: function(){
          var data = this.scaledCoordinates;
          var segmentSize = Math.floor(data.length / this.normalLength);

          for(var i=0; i <= this.normalLength; i++){
            var index = i * segmentSize;
            this.relativeCoordinates.push(data[index]);
          }
        }
      };


      /*CANVAS CODE*/
      var currentCharacter = new Character(); //initialise an empty character object

      var ctx = element[0].getContext('2d'); //set up canvas
      var tracking = false; //stores tracking status, controlling reaction to mousemove events
      var prevX, prevY; //previous coordinates

      var draw = function(x, y, dx, dy){
        ctx.moveTo(x, y); // set focus to starting point
        ctx.lineTo(dx, dy); // draw to new point
        ctx.strokeStyle = '#031c67'; //set color TODO: Make configurable
        ctx.stroke(); //render the line

        currentCharacter.storeCoords(x, y, dx, dy); //store coordinates whenever we're drawing
      };

      //add event listener to canvas (element)
      element.bind('mousedown', function(event){
        prevX = event.offsetX; //where offsetX and Y are coordinates
        prevY = event.offsetY; //from top left of canvas element

        ctx.beginPath(); //begin tracing path
        tracking = true; //tracking status to true
      });

      element.bind('mouseup', function(event){
        tracking = false; //tracking status to false
      });

      element.bind('mousemove', function(event){
        if(tracking){
          newX = event.offsetX; //get new coordinate
          newY = event.offsetY; //that the mouse just moved to

          draw(prevX, prevY, newX, newY); //follow mouse movement to new coordinate

          prevX = newX; //reset prevX and Y to newX and Y
          prevY = newY; //to be ready for the next mousemove event
        }
      });

      element.bind('mouseleave', function(event){
        ctx.clearRect(0, 0, element[0].width, element[0].height); //clear canvas on mouseleave

        //extract important values, push to storage and get ready for new character
        if(currentCharacter.coordinates.length){
          currentCharacter.scaleMatrix();
          currentCharacter.trackingMatrix();
          currentCharacter.scaledCoordinates = flatten(currentCharacter.scaledCoordinates);
          //currentCharacter.assignCharacter(prompt('Which character did you just sketch?'));

          //scope.send(currentCharacter.scaledCoordinates);

          console.log(JSON.stringify(currentCharacter.relativeCoordinates));
          console.log(calculateScores(currentCharacter.relativeCoordinates, characterBank));

          currentCharacter = new Character();
        }
      });

    },
    controller: ['$scope', '$http', function($scope, $http){
      $scope.send = function(json){

        $http.post('http://localhost:3000', json).
          success(function(data, status, headers, config) {
            console.log(status);
          }).
          error(function(data, status, headers, config) {
            console.log(status);
          });
      };
    }]
  };
});